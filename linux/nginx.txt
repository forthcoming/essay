# location = patt{}  精准匹配
# location ~patt{}   正则匹配(~*不区分大小写)
# location patt{}    一般匹配(前几个匹配上就行了)
# 精准匹配(一旦匹配上就返回,有序)> 正则表达式(一旦匹配到就不再匹配,有序) >一般匹配(谁匹配的最长谁说了算,无序)
# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

user root;
worker_processes auto;  # 有多少个工作的子进程
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;
include /usr/share/nginx/modules/*.conf;   # Load dynamic modules. See /usr/share/nginx/README.dynamic.

events {
    worker_connections 1024;  # 一个子进程最大能同时连接多少个,gunicorn的该参数是指所有进程总的最大并发数
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;
    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;
    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # Load modular configuration files from the /etc/nginx/conf.d directory.See http://nginx.org/en/docs/ngx_core_module.html#include for more information.
    include /etc/nginx/conf.d/*.conf;
    upstream test{
        ip_hash;                                     # 同一个用户(ip)会被引到同一个服务器上
        server 1.2.3.4:8080 weight=2;                # 权重默认值为1,权重越大,访问到的概率越大(此处是2/3,会受到ip_hash的影响)
        server 2.3.4.5 max_fails=3 fail_timeout=60s; # 当有2次请求失败时就不再请求该服务器,直至60s后,依次循环
        server baidu.com weight=2; 
    }
    
    #禁用掉通过IP直接访问的方式
    server {
       listen 80 default_server;
       server_name _;
       return 403;
       #rewrite ^ https://www.test.com$request_uri?;
    }

    server {
        listen         5566;
        server_name    acsing.kg.com abc.com;   # 也可以是ip,多个server_name用空格隔开
        location / { proxy_pass http://127.0.0.1:8081;}
        #location ~ ^/show/v1/(.*)$ { proxy_pass http://127.0.0.1:6088; }
        proxy_set_header Host $host;                   # 服务端可通过request.headers.get('Host')获取到服务的域名
        proxy_set_header X-Real-IP $remote_addr;       # 服务端可通过request.headers.get('X-Real-IP')获取到客户端IP
        proxy_set_header X-Forwarded-For $remote_addr; # 服务端可通过request.headers.get('X-Forwarded-For')获取到客户端IP,(记录一组Ip)
        access_log /usr/local/opt/nginx/logs/access.log main;  # log_format中main的指定格式输出日志
        error_log /usr/local/opt/nginx/logs/error.log;
    }

    server {
        listen 443 ssl;
        ssl_certificate /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx.key;
        access_log   /home/avatar/Desktop/nginx.log main; # 每个server可以拥有独立的access log
        root         /usr/share/nginx/html;
        gzip on;
        
        location / {
            proxy_pass http://127.0.0.1:7000;
            # proxy_pass http://test;            # 接收方nginx的server_name对应可以写成test
        }

        location /static/ {
            root /root/Desktop/mysite;
            expires 30d;
        }
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------

nginx -c /usr/local/etc/nginx/nginx.conf
nginx -t        检测配置文件是否有效
nginx -s reload 更改配置重启nginx
http层可以拥有多个server,同一个server下可以有不同的location,不同的server通过server_name区分
如果可以匹配到任何一个server的server_name,则使用此server,否则匹配到第一个server块,不论server_name是否匹配
   
gunicorn无法处理static资源(js,jpg,css),应为其本身是用來處理Python網頁應用程式,而前端的static資源,主要還是交由後面nignx來負責

create the SSL key and certificate files in one motion by typing:
openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt

