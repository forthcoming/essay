[unix_http_server]
file=/var/run/supervisor.sock   ; (the path to the socket file)
chmod=0700                      ; socket file mode (default 0700)

[supervisord]
logfile=/var/log/supervisor/supervisord.log ; main log file;default $CWD/supervisord.log
logfile_maxbytes=50MB
logfile_backups=10                          ; main logfile backups; 0 means none, default 10
loglevel=info                               ; log level; default info; others: debug,warn,trace
pidfile=/var/run/supervisord.pid            ; supervisord pidfile;default supervisord.pid
childlogdir=/var/log/supervisor             ; 'AUTO' child log dir, default $TEMP
nodaemon=false                              ; start in foreground if true; default false
minfds=1024                                 ; min. avail startup file descriptors; default 1024
minprocs=200                                ; min. avail process descriptors;default 200

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///var/run/supervisor.sock ; use a unix:// URL for a unix socket

[program:celery]
command=celery -A sync_task.tasks worker -l=info -s web_demo/logs/celerybeat-schedule
directory=/home/avatar/Atlas          ; celery需要指定目录为sync_task所在目录
process_name=%(program_name)s
numprocs=1
autostart=true
startretries=3
autorestart=unexpected
redirect_stderr=true
stdout_logfile=~/logs/supervisor/%(program_name)s.log
stdout_logfile_maxbytes=8MB
stdout_logfile_backups=5

[program:gunicorn]
command=gunicorn web_demo:app -c gunicorn.py
directory=/home/avatar/Atlas    ; gunicorn需要指定目录为web_demo所在目录
process_name=%(program_name)s
numprocs=1
autostart=true
startretries=3
autorestart=unexpected
redirect_stderr=true
stdout_logfile=~/logs/supervisor/%(program_name)s.log
stdout_logfile_maxbytes=8MB
stdout_logfile_backups=5

[program:redis_single]
command=redis-server /usr/local/etc/redis.conf
process_name=%(program_name)s
numprocs=1                                                     ; number of processes copies to start (def 1)
directory=/usr/local/bin                                       ; directory to cwd to before exec (def no cwd)
autostart=true                                                 ; start at supervisord start (default: true)
startretries=3                                                 ; max # of serial start failures when starting (default 3)
autorestart=unexpected                                         ; 子进程结束后重启策略,false:不重启; true:重启; unexpected:当进程退出码不在exitcodes里面时才重启
exitcodes=0,2                                                  ; 对应autorestart=unexpected,exitcodes里面定义的退出码是expected,os._exit(N),N就是退出码
redirect_stderr=true                                           ; redirect proc stderr to stdout (default false)
stdout_logfile=/usr/local/var/supervisor/%(program_name)s.log  ; 只能捕获各进程输出到控制台的信息(eg: "logfile /usr/log"则无法获取)     
stdout_logfile_maxbytes=16MB                                   ; max # logfile bytes b4 rotation (default 50MB)
stdout_logfile_backups=10                                      ; # of stdout logfile backups (0 means none, default 10)
;umask=022                                                     ; umask for process (default None)
;priority=999                                                  ; the relative start priority (default 999)
;startsecs=1                                                   ; # of secs prog must stay up to be running (def. 1)
;stopsignal=QUIT                                               ; signal used to kill process (default TERM)
;stopwaitsecs=10                                               ; max num secs to wait b4 SIGKILL (default 10)
;stopasgroup=false                                             ; send stop signal to the UNIX process group (default false)
;killasgroup=false                                             ; SIGKILL the UNIX process group (def false)
;user=chrism                                                   ; setuid to this UNIX account to run the program
;stdout_capture_maxbytes=1MB                                   ; number of bytes in 'capturemode' (default 0)
;stdout_events_enabled=false                                   ; emit events on stdout writes (default false)
;stdout_syslog=false                                           ; send stdout to syslog with process name (default false)
;stderr_logfile=/a/path                                        ; stderr log path, NONE for none; default AUTO
;stderr_logfile_maxbytes=1MB                                   ; max # logfile bytes b4 rotation (default 50MB)
;stderr_logfile_backups=10                                     ; # of stderr logfile backups (0 means none, default 10)
;stderr_capture_maxbytes=1MB                                   ; number of bytes in 'capturemode' (default 0)
;stderr_events_enabled=false                                   ; emit events on stderr writes (default false)
;stderr_syslog=false                                           ; send stderr to syslog with process name (default false)

[program:mongo_single]
command=mongod -f /usr/local/etc/mongod.conf
process_name=%(program_name)s
numprocs=1                                       
directory=/usr/local/bin                         
autostart=true                                  
startretries=3                                  
autorestart=unexpected                          
redirect_stderr=true                            
stdout_logfile=/usr/local/var/supervisor/%(program_name)s.log
stdout_logfile_maxbytes=8MB                    
stdout_logfile_backups=5                       

[program:mysql_master]
command=mysqld --defaults-file=/usr/local/etc/my.cnf
process_name=%(program_name)s
numprocs=1
directory=/usr/local/bin
autostart=true
startretries=3
autorestart=unexpected
redirect_stderr=true
stdout_logfile=/usr/local/var/supervisor/%(program_name)s.log
stdout_logfile_maxbytes=8MB
stdout_logfile_backups=1

[program:mysql_slave]
command=mysqld --defaults-file=/usr/local/etc/my_slave.cnf
process_name=%(program_name)s
numprocs=1
directory=/usr/local/bin
autostart=true
startretries=3
autorestart=unexpected
redirect_stderr=true
stdout_logfile=/usr/local/var/supervisor/%(program_name)s.log
stdout_logfile_maxbytes=8MB
stdout_logfile_backups=1

[program:es_single]
command=elasticsearch
process_name=%(program_name)s
numprocs=1
directory=/usr/local/bin
autostart=false
startretries=3
autorestart=unexpected
redirect_stderr=true
stdout_logfile=/usr/local/var/supervisor/%(program_name)s.log
stdout_logfile_maxbytes=8MB
stdout_logfile_backups=1

[program:nginx]
command=nginx -g 'daemon off;' -c /usr/local/etc/nginx/nginx.conf ; supervisor不能监控后台程序
process_name=%(program_name)s
numprocs=1
directory=/usr/local/bin
autostart=false
startretries=3
autorestart=unexpected
redirect_stderr=true
stdout_logfile=/usr/local/var/supervisor/%(program_name)s.log
stdout_logfile_maxbytes=8MB
stdout_logfile_backups=1

[program:python]
command=python3 -u test_print.py     ; -u(unbuffered)参数强制其标准输出同标准错误一样不通过缓存直接打印到屏幕
process_name=%(process_num)02d
numprocs=3
directory=/Users/zgt/Desktop/        ; python需要执行文件的路径
autostart=false
startretries=3
autorestart=unexpected
redirect_stderr=true
stdout_logfile=/usr/local/var/supervisor/%(program_name)s.log
stdout_logfile_maxbytes=8MB
stdout_logfile_backups=1

[program:redis_cluster8001]
command=redis-server /usr/local/etc/redis_cluster8001.conf
numprocs=1                                       
autostart=false                        
startretries=3                                 
redirect_stderr=true                          
stdout_logfile=/usr/local/var/supervisor/%(program_name)s.log
stdout_logfile_maxbytes=16MB                 
stdout_logfile_backups=1                   

[program:redis_cluster8002]
command=redis-server /usr/local/etc/redis_cluster8002.conf
numprocs=1                                       
autostart=false                                
startretries=3                                 
redirect_stderr=true                          
stdout_logfile=/usr/local/var/supervisor/%(program_name)s.log
stdout_logfile_maxbytes=16MB                 
stdout_logfile_backups=1 

[program:redis_cluster8003]
command=redis-server /usr/local/etc/redis_cluster8003.conf
numprocs=1                                       
autostart=false                                
startretries=3                                 
redirect_stderr=true                          
stdout_logfile=/usr/local/var/supervisor/%(program_name)s.log
stdout_logfile_maxbytes=16MB                 
stdout_logfile_backups=1 

[program:redis_cluster8004]
command=redis-server /usr/local/etc/redis_cluster8004.conf
numprocs=1                                       
autostart=false                                
startretries=3                                 
redirect_stderr=true                          
stdout_logfile=/usr/local/var/supervisor/%(program_name)s.log
stdout_logfile_maxbytes=16MB                 
stdout_logfile_backups=1 

[program:redis_cluster8005]
command=redis-server /usr/local/etc/redis_cluster8005.conf
numprocs=1                                       
autostart=false                                
startretries=3                                 
redirect_stderr=true                          
stdout_logfile=/usr/local/var/supervisor/%(program_name)s.log
stdout_logfile_maxbytes=16MB                 
stdout_logfile_backups=1 

[program:redis_cluster8006]
command=redis-server /usr/local/etc/redis_cluster8006.conf
numprocs=1                                       
autostart=false                                
startretries=3                                 
redirect_stderr=true                          
stdout_logfile=/usr/local/var/supervisor/%(program_name)s.log
stdout_logfile_maxbytes=16MB                 
stdout_logfile_backups=1 

[group:redis_cluster]
programs=redis_cluster8001,redis_cluster8002,redis_cluster8003,redis_cluster8004,redis_cluster8005,redis_cluster8006
; 重启命令restart redis_cluster:

; The [include] section can just contain the "files" setting.  This
; setting can list multiple files (separated by whitespace or
; newlines).  It can also contain wildcards.  The filenames are
; interpreted as relative to this file.  Included files *cannot*
; include files themselves.
;[include]
;files = relative/directory/*.conf


; pip install supervisor
; Comments must have a leading space: "a=b ;comment" not "a=b;comment".
; supervisord -c /etc/supervisor/supervisord.conf  # 启动supervisor
; supervisorctl -c /etc/supervisor/supervisord.conf  # 客户端连接
; supervisorctl update    # Reload config and add/remove as necessary, and will restart affected programs
; supervisorctl shutdown  # 停止supervisord服务
; supervisorctl tail -f 进程名 # 查看该进程的日志,进程名是[program:xx]中的xx
; supervisorctl reload # Restarts the remote supervisord
; supervisorctl status # 查看supervisor监管的进程状态
; supervisorctl start 进程名 # 启动进程
; supervisorctl stop 进程名 # 停止进程
; supervisorctl stop all # 停止全部进程,start、restart、stop都不会载入最新的配置文件
; 服务端称为supervisord,主要负责在启动自身时启动管理的子进程(所有supervisord启动的进程都是其自身的子进程)
; 客户端称为supervisorctl,它提供命令行来使用supervisord服务端提供的功能,当客户端和服务器位于同一台机器上时,客户端与服务器共用同一个配置文件supervisord.conf
